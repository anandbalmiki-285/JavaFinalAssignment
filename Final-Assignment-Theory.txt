Question-2
key points about Constructor
*Constructors are invoked implicitly when you instantiate objects.
*The two rules for creating a constructor are:
*The name of the constructor should be the same as the class.
*A Java constructor must not have a return type.
*If a class doesn't have a constructor, the Java compiler automatically creates a default constructor during run-time. The default constructor initializes instance variables with default values. For example, the int variable will be initialized to 0
*Constructor types:
*No-Arg Constructor - a constructor that does not accept any arguments
*Parameterized constructor - a constructor that accepts arguments
*Default Constructor - a constructor that is automatically created by the Java compiler if it is not explicitly defined.
*A constructor cannot be abstract or static or final.
*A constructor can be overloaded but can not be overridden.

Example :- 

Plane.java
==========
public class Plane {

	private String name;
	private String type;
	private Double totalweight;

	public Plane(String name, String type, Double totalweight) {
		super();
		this.name = name;
		this.type = type;
		this.totalweight = totalweight;
	}
}
CargoPlane.java
==============
public class CargoPlane extends Plane {

	private Double totalGoodsWeigth;

	public CargoPlane(String name, String type, Double totalweight, Double totalGoodsWeigth) {
		super(name, type, totalweight);

		this.totalGoodsWeigth = totalGoodsWeigth;
	}
}

TestApp.java
============
public class TestApp {

	public static void main(String[] args) {

		CargoPlane cargePlane = new CargoPlane("Airbus", "Cargo", 80000.05, 750000.22);
		System.out.println(cargePlane);
	}
}


* In the above example we have two classes Plane and CargoPlane. Plane is parent class , while 
cargoplane is child class.
* Inside CargoPlane class(child) constructor we have to call the parent class constructor, since 
by default parent class constructor is called by child classconstructor through super() method.

Program for this question-2 is in program file.

================================================================================

Question-3
Write a Java programme that takes an integer from the user and throws an exception
if it is negative.Demonstrate Exception handling of same program as solution.

Exception Handing :- 
          * Where there is risky code i.e, chances of getting any exception we place that code 
            inside try and catch block.
	    * The risky code is placed inside try block if there any exception during execution,
            then the catch block catches the exception and if there is any handling logic that 
            logic will get executed.

Example:-

public class TestApp {
	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in);
		System.out.println("Enter Number");

		int number = sc.nextInt();

		try {
			checkNumberIsNegativeOrNot(number);
		} catch (ArithmeticException e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			sc.close();
		}
	}

	private static String checkNumberIsNegativeOrNot(Integer number) throws ArithmeticException {
		if (number < 0) {
			throw new ArithmeticException("Negative Number");
		} else {
			return "Entered number is a positive number";
		}
	}
}


* In the above example we have a method(checkNumberIsNegativeOrNot) to check if the number 
  negative or not,if the number is negative it throws a ArithmeticException.
* During Execution when the user enters the number , from the main method we call this 
  checkNumberIsNegativeOrNot method,since this method will returns string if it is a 
  positive number or else it will throw an exception. Since it is a risky code we place 
  this code inside a try and catch block.While calling the method if it returns exception
  the ArithmeticException catch block catches the exception and the logic inside this catch
  block gets executed.  

Program for this Question-3 is in the programs file
================================================================================

Question-5
Demonstrate the difference between abstract class and interface?

Interface
=========
*An abstract class is a special type of class in object-oriented programming that cannot be instantiated directly. Instead, it serves as a blueprint or template for other classes to be derived from. Some of the key features of an abstract class include:
*Cannot be instantiated:Abstract classes cannot be directly instantiated, which means you cannot create objects of an abstract class.
*Contains at least one pure virtual function: Abstract classes must contain at least one pure virtual function, which means that the function has no implementation and must be implemented by any derived classes.
*Can contain both abstract and non-abstract methods: Abstract classes can have both abstract and non-abstract methods. Non-abstract methods have a complete implementation and can be called directly.
*Can have constructors and destructors: Abstract classes can have constructors and destructors like any other class.
*Can have member variables: Abstract classes can have member variables, which are variables that belong to an object of the class.
*Can be used as a base class: Abstract classes can be used as a base class for other classes, which means that they can be inherited by other classes.
*Overall, abstract classes are used to define a common interface or behavior that can be shared by multiple related classes, but with specific implementations in each derived class.

Abstract class
=============
*Defines a set of methods and properties: An interface defines a set of methods and properties that must be implemented by any class or structure that implements the interface.
*Provides a common protocol: Interfaces provide a common protocol that allows different software components to communicate with each other.
*Supports polymorphism: An interface can be used to achieve polymorphism, which means that objects of different classes can be treated as if they belong to the same type, as long as they implement the same interface.
*Enables separation of concerns: Interfaces enable separation of concerns, which means that different parts of a software system can be developed independently of each other, as long as they adhere to the interface specifications.
*Improves code reusability: Interfaces improve code reusability by allowing different software components to reuse the same code base, as long as they implement the same interface.
*Enforces design patterns: Interfaces can be used to enforce design patterns, such as the Adapter pattern, by requiring that certain methods or properties be implemented by the implementing classes.
*Facilitates testing: Interfaces facilitate testing by allowing software components to be tested independently of each other, using mock objects that implement the interface.

Program for this Question-5 is in the programs file.